import type { NextApiRequest, NextApiResponse } from 'next'
import client from '../../lib/graphql-client'
import { GET_SUBMISSIONS } from '../../graphql/queries'
import { MerkleTree } from '../../lib/MerkleTree'
import { pedersenHashConcat, toHex, randomBigInt, generateProofCallData } from '../../lib/Library'

const TEST_MERKLE_TREE =
  '0x236300e5f50d0c9ca25bb5236bef8cfc105be89ea9f0cafa654efe3c187d61d7\n0x222e02631d2e42c366ca329bd0215f784977482361b3e3e25d4aa475b74ae34e,0x2e33f107679e0266c9ef44f4e102f4b5057d3bef8c539aa992bbfd1dc9b76fff\n0x2caec82ca50a0a12b6c3326514b008dca0c660813e914628424efc324f24d6c7,0x17090372b307323ae8be766bffc0c6f7448df14b8f0d1722b54d6dd19ae9a490,0x02847ef599b52953324d414cb09db36ec96d2b81f58da029502d51ac06e57d81,0x04f04289efbb9a868e7f3e1927be4c545bb5652a2d62c09d46fc9d5c8961ff65\n0x0c5649b076cba69fce7ede4e1dbe347cc7c8efbbf7f88ff45321a083282c4279,0x09a0f73168877be5c4bbbda9fba840f46f5ce6bee4bfe11e3da6a2e0199d06dc,0x02a6a2ce35fe131e22b0dbe09ea226ef22a3c5f1800e335da41f3a3efd3ae779,0x2adcd7982b1f5bbaada83446eb7673c030aa637e926e9ca1797d5101796940e0,0x18f32e3b7f8940f54e731dea78e457867324f9f8ee05160e70be7b087e20d05b,0x2cf9afe70b7dc423b81dd095a64cdd235ba035f48efb49afead26e34e56c1dfa,0x085bfb76eef3b951f8b44883a194e322f9b18bdf85d8ff4e0f7b94979915e90a,0x0dfda3ae5f5f6a214db6c7f2eca483ffcaccf1ca9547355e8edb5e53b0eb14f9\n0x123427e436073cd9e5d57e98bc39c9d46ec2d8f22dd5f00e85925802e099a3be,0x1256f9dedda2fb98acf50367fb38842f323bb1e575a9e30cc873a3068b3edd30,0x241ba6983720fff9a95c0a7fb86a48891a02c40316fcf14baf86bd21510231d3,0x0bdd27e6528aaac2cfdddb4db9598a5e04a5dd972a3c621c3b0dc29c18a0934e,0x283c3a5ad0fb806ad169200daae09f086c6fa3a3ce965b5041c76f5824fabc58,0x1ee350d4a34aecf16ea2c60e7efffa5298a8552efb84b792c2df3b5a2f31fd2b,0x00c7c827766669b121c98c67c149bf13c7eb233752dc9c329d014a2f62870be7,0x0cd95349c76b48d55a28e29c11e0c10739dd69c5855ae13c3a1d5182f1236a4b,0x169e2cc75910c5731151564de5cdccd863f88d346d7ef22dc2b27338ab655eac,0x15edc102fc6e4e82799a9491f10a981a4e8bc8906bafa6c95eee3a97f2679242,0x0f3ac99896c4421807e132b5d63a5781b1a5f20527e793f1803b9bcba15a3612,0x2a8bd6c4473f584c835f6b6aec6baf7eeb4e453442c460adecaf05b299a7a9f8,0x1163c2d5fa5d1fe3947b58f29872e36d9304f8908c923098a133f01d5e84322b,0x0ff480930aaed326e3bd81f6c6cbc2ecc95b565288bd11292fedbc31db1ead24,0x0b0b489b9677f0fdc0fdc2fc4b9a512c8d7e5a81901dad8617dc06a8f91f6b2b,0x02ecef98c478a3d906686ea540e662594a660d82c3c967dd8ab0d4f6a9f53ca0\n0x1cba4ff3b7db43e4a3a5f0d3e9c575d9af9bfbae7597945a7af40699292d1395,0x00398deeb59ffd293214fb1ffa598b035cd9b648cdb869ae7b283eef7e7b0cc5,0x00e72025e87a4fa36e3478abf033eaf86b57956f10a74ff819a29deca51c1930,0x00bd3766367f4d649eda4eb5095b9f9c9b849eedb63dd06c9c12da0b59e190b6,0x002750cc127f64edf268eb1e12a08b8aebc81d6ccc24607b189faa57cf2d6c33,0x0033aa225509f0d3dfc7496376c1d763f9290df6d620c6184d1419991dfc34d1,0x004415bcccde3d868825db509cffb49e2c9910980deacbd266903d493d409b5c,0x0045887db7cac65af81d45f3a42557113e903afbc7bc5221747d2a1a28c99f69,0x0090d81f1451464d82dbc4ba0f1b62dc1a9c8edc6ec9e2c0bdad0c2b96f076fa,0x001e2dff679098a264d9db2b9f117aef02e1ebd1746b5d4dd741f2e93c3b7972,0x00d499f6b80d3c1eaeee8ce4b2d7d85c9ec92c9bebcc9d1f372fb584b8703d50,0x001a3ee872b31e00ef4fdfe435ad62fc223f529acc7e800810c36269146c92fe,0x007f9ca898e18f3550ed837232cf2cdaa81fda5fcb9de4024114fd77010c5119,0x00fdcd28209957b782892053dba9db288fe5bade4e040a58e93e0f368d545f15,0x00143b85d7c0ae5021037390a7e6246f343e1b0990eb73a148b605e54d6e6efa,0x00492b105357f696d755d11efb66f0b85e009fcde3aa2b7f2a004a94dfbfa185,0x004b39d9ce51f41441ac5644722ffb484ae13f678784a40405ae690bf7b80a89,0x00ddc9e478019413d5c6295ba0a0db8118134f4ac98057f13c1fc41bab2ffb19,0x005718106c6f79ecdaee6fefb2e198f56b5146011b31c77fbf02d82f2f213b74,0x000be94f9789983c8bd687a9d45afee0837ee1a9f59f972cebb2a335e3e5ef14,0x004d6ba8a10abea2657a87e7679b678e976b4a9225f9a9f95cc42efb66fb5349,0x00facd7b207518c5e5b0e9ed5166baa935e44b291b2723cdf0ccb158503ee27e,0x009e639ac968a26397b3357d201cf0108b8a3c1428ff01bfc60f575696a7c788,0x004f09bd8cfdb9992e1f3a7d58f47057428320fc56954a687b4a51d40aceba53,0x000c3e5dea9df8bc670b565982d34353acd367a7ac402c17b01939eb24cfe10b,0x006385153baf6e4cba116502d811f7d518fd0bb72c83e372d871b26227806fdf,0x0083de2450552798265c16e47c84025b11e92d3f55c5592da25a301087bd1571,0x008385d9b11b2ea32c56c60eea2ede7d01a6b0f7c619fb63593c801ecfe290d1,0x00aa6b3c9f55f86231392d43e984b55d3de254722e369ef2334b3797f0bd4533,0x00fc25bb31c7d1e7556c95b8e432faea76478a28ccdf07719caab4bdda62d705,0x00dc29ce4e16e76018cc97bcaae4d9a7e7c3e76d0543daaa46bbc69bdee85a68,0x001a8978f0930e0fc28670a0dd054285d19a70b5870b8039fff8c7f5b638c8a2'

const TEST_ADDRESS = '0xdef6919d69b28394B9D97FAf31b0CC2f5739ab57'
const TEST_USER = '0x00e617769f05294f974573fe683eec8a3aea0a31ca2ef80335c762a2705643ef'
const TEST_COMMUNITY_HASH = '0x00d0407e2d4243aa61622237535069894b955765a1a22fbd326fb863af25e362'

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // TODO: get user secret
  const userSecret = BigInt(TEST_USER)
  // TODO: get community hash
  const communityHash = BigInt(TEST_COMMUNITY_HASH)
  // TODO: get wasm buffer
  // TODO: get zkey buffer
  let DOMAIN = 'http://localhost:3000'
  let wasmBuff = await getFileBuffer(`${DOMAIN}/circuit.wasm`)
  let zkeyBuff = await getFileBuffer(`${DOMAIN}/circuit_final.zkey`)
  // TODO: get wallet address
  const address = TEST_ADDRESS
  // TODO: get actual merkle tree
  const mt = MerkleTree.createFromStorageString(TEST_MERKLE_TREE)

  const computedCommitment = toHex(pedersenHashConcat(userSecret, communityHash))

  if (!mt.leafExists(BigInt(computedCommitment))) {
    console.log('Leaf corresponding to (key,secret) does not exist in MerkleTree.')
  }

  let proof = await generateProofCallData(mt, userSecret, communityHash, address, wasmBuff, zkeyBuff)

  try {
    res.status(200).json({ proof })
  } catch (e) {
    console.log(e)
    res.status(500).json(e)
  }
}

async function getFileString(filename) {
  let req = await fetch(filename)
  return await req.text()
}
async function getFileBuffer(filename) {
  let req = await fetch(filename)
  return Buffer.from(await req.arrayBuffer())
}
